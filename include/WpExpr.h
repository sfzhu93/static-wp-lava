//
// Created by suz305 on 2/27/19.
//

#ifndef STATIC_WP_LAVA_WPEXPR_H
#define STATIC_WP_LAVA_WPEXPR_H

#include "z3++.h"
#include "llvm/IR/Value.h"
#include "llvm/Support/raw_ostream.h"
#include <string_view>

#include <memory>

namespace WpExpr {

enum NodeType {
  BINOP, // Binary Operator
  UNIOP, // Unary Operator
  VAR,   // Variable
  CONST, // Constant
  UPRED  // Undetermined predicate of a variable
};
enum Operator {
  PLUS,
  MINUS,
  AND,
  OR,
  MUL,
  DIV,
  IND,
  MOD,
  XOR, // binop
  TO_INT,
  TO_REAL,
  NOT, // Uniop
  GT,
  GE,
  EQ,
  NEQ,
  LT,
  LE // Compare
};

static const char *wp_init_var = "__wp_init_var";

class Node {
public:
  typedef std::shared_ptr<Node> NodePtr;

  Node(){};
  Node(const Node &node);
  Node(Node &&node) noexcept;
  Node(NodeType type, NodePtr &&left, NodePtr &&right, std::string_view val)
      : type(type), left(std::move(left)), right(std::move(right)), value(val),
        name(value) {}

  // ~Node(); // Destructor

  std::string GetName();
  std::string ToString();

  std::string ToSMTLanguage();

  /**
   * This function fills the undetermined predicates generated by a function
   * call.
   * @param upred The expression containing the undetermined predicate.
   * @param expr The expression to be filled. Usually it is the WP.
   * @param retValName The name of the call instrution. It should be in expr.
   * @return Returns the upred.
   */
  static void fillUndeterminedPredicate(NodePtr &upred, const NodePtr &expr,
                                        const llvm::Value *val);

  NodeType type;
  Operator operatorType;
  NodePtr left, right;
  llvm::Value *valueObj;
  std::string value;
  std::string name;

private:
};

Node::NodePtr Substitute(Node::NodePtr &src, const llvm::Value *val,
                         const Node::NodePtr &expr);

Node::NodePtr CreateBinOp(Node::NodePtr &&left, Node::NodePtr &&right,
                          Operator optr);

Node::NodePtr CreateUniOp(Node::NodePtr &&left, Operator optr);

Node::NodePtr CreateVar(llvm::Value *val);

Node::NodePtr CreateVar(const std::string &name);

Node::NodePtr CreateConst(const std::string &value);

Node::NodePtr CreateUndeterminedPredicate(llvm::Value *val);

static z3::context defaultcontext;
} // namespace WpExpr

#endif // STATIC_WP_LAVA_WPEXPR_H
