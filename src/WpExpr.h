//
// Created by suz305 on 2/27/19.
//

#ifndef STATIC_WP_LAVA_WPEXPR_H
#define STATIC_WP_LAVA_WPEXPR_H

#include <memory>
#include "llvm/IR/Value.h"
#include "llvm/Support/raw_ostream.h"
#include "z3++.h"

namespace WpExpr{
    enum NodeType {
        BINOP,        //Binary Operator
        UNIOP,        //Unary Operator
        VAR,          //Variable
        CONST,        //Constant
        UPRED         //Undetermined predicate of a variable
    };
    enum Operator {PLUS, MINUS, AND, OR, MUL, DIV, IND, MOD, XOR,//binop
            TO_INT, TO_REAL, NOT, //Uniop
            GT, GE, EQ, NEQ, LT, LE //Compare
    };

    static const char *wp_init_var = "__wp_init_var";

    class Node : public std::enable_shared_from_this<Node> {
    public:
        NodeType type;
        Operator operatorType;
        typedef std::shared_ptr<Node> NodePtr;
        NodePtr left, right;
        llvm::Value *valueObj;
        std::string value;
        std::string &name;

        Node() : name(value),valueObj(nullptr) {}

        Node(Node &node);

        Node(NodeType type, NodePtr &&left, NodePtr &&right, std::string &&val) :
                type(type), left(std::move(left)), right(std::move(right)), value(std::move(val)), name(value) {

        }

        std::string GetName();
        std::string ToString();

        std::string ToSMTLanguage();

        static NodePtr CreateBinOp(NodePtr &&left, NodePtr &&right, Operator optr);

        static NodePtr CreateUniOp(NodePtr &&left, Operator optr);

        static NodePtr CreateVar(llvm::Value *val);

        static NodePtr CreateVar(std::string name);

        static NodePtr CreateConst(std::string value);

        static NodePtr CreateUndeterminedPredicate(llvm::Value *val);

        /**
         * This function fills the undetermined predicates generated by a function call.
         * @param upred The expression containing the undetermined predicate.
         * @param expr The expression to be filled. Usually it is the WP.
         * @param retValName The name of the call instrution. It should be in expr.
         * @return Returns the upred.
         */
        static void fillUndeterminedPredicate(NodePtr &upred, const NodePtr &expr, const llvm::Value *val);

        static NodePtr substitute(NodePtr &src, const llvm::Value *val, const NodePtr &expr);

    private:

    };

    static z3::context defaultcontext;
}



#endif //STATIC_WP_LAVA_WPEXPR_H
